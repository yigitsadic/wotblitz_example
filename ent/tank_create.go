// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"github.com/facebook/ent/dialect/sql/sqlgraph"
	"github.com/facebook/ent/schema/field"
	"github.com/yigitsadic/wotblitz_example/ent/module"
	"github.com/yigitsadic/wotblitz_example/ent/tank"
)

// TankCreate is the builder for creating a Tank entity.
type TankCreate struct {
	config
	mutation *TankMutation
	hooks    []Hook
}

// SetName sets the name field.
func (tc *TankCreate) SetName(s string) *TankCreate {
	tc.mutation.SetName(s)
	return tc
}

// SetTier sets the tier field.
func (tc *TankCreate) SetTier(i int) *TankCreate {
	tc.mutation.SetTier(i)
	return tc
}

// SetIsPremium sets the isPremium field.
func (tc *TankCreate) SetIsPremium(b bool) *TankCreate {
	tc.mutation.SetIsPremium(b)
	return tc
}

// SetNillableIsPremium sets the isPremium field if the given value is not nil.
func (tc *TankCreate) SetNillableIsPremium(b *bool) *TankCreate {
	if b != nil {
		tc.SetIsPremium(*b)
	}
	return tc
}

// SetTankClass sets the tankClass field.
func (tc *TankCreate) SetTankClass(s string) *TankCreate {
	tc.mutation.SetTankClass(s)
	return tc
}

// SetCountry sets the country field.
func (tc *TankCreate) SetCountry(s string) *TankCreate {
	tc.mutation.SetCountry(s)
	return tc
}

// SetCreatedAt sets the createdAt field.
func (tc *TankCreate) SetCreatedAt(t time.Time) *TankCreate {
	tc.mutation.SetCreatedAt(t)
	return tc
}

// SetNillableCreatedAt sets the createdAt field if the given value is not nil.
func (tc *TankCreate) SetNillableCreatedAt(t *time.Time) *TankCreate {
	if t != nil {
		tc.SetCreatedAt(*t)
	}
	return tc
}

// AddFromTankIdIDs adds the fromTankId edge to Tank by ids.
func (tc *TankCreate) AddFromTankIdIDs(ids ...int) *TankCreate {
	tc.mutation.AddFromTankIdIDs(ids...)
	return tc
}

// AddFromTankId adds the fromTankId edges to Tank.
func (tc *TankCreate) AddFromTankId(t ...*Tank) *TankCreate {
	ids := make([]int, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return tc.AddFromTankIdIDs(ids...)
}

// AddNextTankIDs adds the nextTanks edge to Tank by ids.
func (tc *TankCreate) AddNextTankIDs(ids ...int) *TankCreate {
	tc.mutation.AddNextTankIDs(ids...)
	return tc
}

// AddNextTanks adds the nextTanks edges to Tank.
func (tc *TankCreate) AddNextTanks(t ...*Tank) *TankCreate {
	ids := make([]int, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return tc.AddNextTankIDs(ids...)
}

// AddNextTankIdIDs adds the nextTankId edge to Tank by ids.
func (tc *TankCreate) AddNextTankIdIDs(ids ...int) *TankCreate {
	tc.mutation.AddNextTankIdIDs(ids...)
	return tc
}

// AddNextTankId adds the nextTankId edges to Tank.
func (tc *TankCreate) AddNextTankId(t ...*Tank) *TankCreate {
	ids := make([]int, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return tc.AddNextTankIdIDs(ids...)
}

// AddPreviousTankIDs adds the previousTanks edge to Tank by ids.
func (tc *TankCreate) AddPreviousTankIDs(ids ...int) *TankCreate {
	tc.mutation.AddPreviousTankIDs(ids...)
	return tc
}

// AddPreviousTanks adds the previousTanks edges to Tank.
func (tc *TankCreate) AddPreviousTanks(t ...*Tank) *TankCreate {
	ids := make([]int, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return tc.AddPreviousTankIDs(ids...)
}

// AddModuleIDs adds the modules edge to Module by ids.
func (tc *TankCreate) AddModuleIDs(ids ...int) *TankCreate {
	tc.mutation.AddModuleIDs(ids...)
	return tc
}

// AddModules adds the modules edges to Module.
func (tc *TankCreate) AddModules(m ...*Module) *TankCreate {
	ids := make([]int, len(m))
	for i := range m {
		ids[i] = m[i].ID
	}
	return tc.AddModuleIDs(ids...)
}

// Mutation returns the TankMutation object of the builder.
func (tc *TankCreate) Mutation() *TankMutation {
	return tc.mutation
}

// Save creates the Tank in the database.
func (tc *TankCreate) Save(ctx context.Context) (*Tank, error) {
	var (
		err  error
		node *Tank
	)
	tc.defaults()
	if len(tc.hooks) == 0 {
		if err = tc.check(); err != nil {
			return nil, err
		}
		node, err = tc.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*TankMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = tc.check(); err != nil {
				return nil, err
			}
			tc.mutation = mutation
			node, err = tc.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(tc.hooks) - 1; i >= 0; i-- {
			mut = tc.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, tc.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (tc *TankCreate) SaveX(ctx context.Context) *Tank {
	v, err := tc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// defaults sets the default values of the builder before save.
func (tc *TankCreate) defaults() {
	if _, ok := tc.mutation.IsPremium(); !ok {
		v := tank.DefaultIsPremium
		tc.mutation.SetIsPremium(v)
	}
	if _, ok := tc.mutation.CreatedAt(); !ok {
		v := tank.DefaultCreatedAt()
		tc.mutation.SetCreatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (tc *TankCreate) check() error {
	if _, ok := tc.mutation.Name(); !ok {
		return &ValidationError{Name: "name", err: errors.New("ent: missing required field \"name\"")}
	}
	if v, ok := tc.mutation.Name(); ok {
		if err := tank.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf("ent: validator failed for field \"name\": %w", err)}
		}
	}
	if _, ok := tc.mutation.Tier(); !ok {
		return &ValidationError{Name: "tier", err: errors.New("ent: missing required field \"tier\"")}
	}
	if _, ok := tc.mutation.IsPremium(); !ok {
		return &ValidationError{Name: "isPremium", err: errors.New("ent: missing required field \"isPremium\"")}
	}
	if _, ok := tc.mutation.TankClass(); !ok {
		return &ValidationError{Name: "tankClass", err: errors.New("ent: missing required field \"tankClass\"")}
	}
	if v, ok := tc.mutation.TankClass(); ok {
		if err := tank.TankClassValidator(v); err != nil {
			return &ValidationError{Name: "tankClass", err: fmt.Errorf("ent: validator failed for field \"tankClass\": %w", err)}
		}
	}
	if _, ok := tc.mutation.Country(); !ok {
		return &ValidationError{Name: "country", err: errors.New("ent: missing required field \"country\"")}
	}
	if v, ok := tc.mutation.Country(); ok {
		if err := tank.CountryValidator(v); err != nil {
			return &ValidationError{Name: "country", err: fmt.Errorf("ent: validator failed for field \"country\": %w", err)}
		}
	}
	if _, ok := tc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "createdAt", err: errors.New("ent: missing required field \"createdAt\"")}
	}
	return nil
}

func (tc *TankCreate) sqlSave(ctx context.Context) (*Tank, error) {
	_node, _spec := tc.createSpec()
	if err := sqlgraph.CreateNode(ctx, tc.driver, _spec); err != nil {
		if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	return _node, nil
}

func (tc *TankCreate) createSpec() (*Tank, *sqlgraph.CreateSpec) {
	var (
		_node = &Tank{config: tc.config}
		_spec = &sqlgraph.CreateSpec{
			Table: tank.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: tank.FieldID,
			},
		}
	)
	if value, ok := tc.mutation.Name(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: tank.FieldName,
		})
		_node.Name = value
	}
	if value, ok := tc.mutation.Tier(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: tank.FieldTier,
		})
		_node.Tier = value
	}
	if value, ok := tc.mutation.IsPremium(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeBool,
			Value:  value,
			Column: tank.FieldIsPremium,
		})
		_node.IsPremium = value
	}
	if value, ok := tc.mutation.TankClass(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: tank.FieldTankClass,
		})
		_node.TankClass = value
	}
	if value, ok := tc.mutation.Country(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: tank.FieldCountry,
		})
		_node.Country = value
	}
	if value, ok := tc.mutation.CreatedAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: tank.FieldCreatedAt,
		})
		_node.CreatedAt = value
	}
	if nodes := tc.mutation.FromTankIdIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   tank.FromTankIdTable,
			Columns: tank.FromTankIdPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: tank.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := tc.mutation.NextTanksIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   tank.NextTanksTable,
			Columns: tank.NextTanksPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: tank.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := tc.mutation.NextTankIdIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   tank.NextTankIdTable,
			Columns: tank.NextTankIdPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: tank.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := tc.mutation.PreviousTanksIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   tank.PreviousTanksTable,
			Columns: tank.PreviousTanksPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: tank.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := tc.mutation.ModulesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   tank.ModulesTable,
			Columns: tank.ModulesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: module.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// TankCreateBulk is the builder for creating a bulk of Tank entities.
type TankCreateBulk struct {
	config
	builders []*TankCreate
}

// Save creates the Tank entities in the database.
func (tcb *TankCreateBulk) Save(ctx context.Context) ([]*Tank, error) {
	specs := make([]*sqlgraph.CreateSpec, len(tcb.builders))
	nodes := make([]*Tank, len(tcb.builders))
	mutators := make([]Mutator, len(tcb.builders))
	for i := range tcb.builders {
		func(i int, root context.Context) {
			builder := tcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*TankMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, tcb.builders[i+1].mutation)
				} else {
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, tcb.driver, &sqlgraph.BatchCreateSpec{Nodes: specs}); err != nil {
						if cerr, ok := isSQLConstraintError(err); ok {
							err = cerr
						}
					}
				}
				mutation.done = true
				if err != nil {
					return nil, err
				}
				id := specs[i].ID.Value.(int64)
				nodes[i].ID = int(id)
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, tcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX calls Save and panics if Save returns an error.
func (tcb *TankCreateBulk) SaveX(ctx context.Context) []*Tank {
	v, err := tcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}
