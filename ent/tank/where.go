// Code generated by entc, DO NOT EDIT.

package tank

import (
	"github.com/facebook/ent/dialect/sql"
	"github.com/facebook/ent/dialect/sql/sqlgraph"
	"github.com/yigitsadic/wotblitz_example/ent/predicate"
)

// ID filters vertices based on their identifier.
func ID(id int) predicate.Tank {
	return predicate.Tank(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.Tank {
	return predicate.Tank(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.Tank {
	return predicate.Tank(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldID), id))
	})
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.Tank {
	return predicate.Tank(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(ids) == 0 {
			s.Where(sql.False())
			return
		}
		v := make([]interface{}, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.In(s.C(FieldID), v...))
	})
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.Tank {
	return predicate.Tank(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(ids) == 0 {
			s.Where(sql.False())
			return
		}
		v := make([]interface{}, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.NotIn(s.C(FieldID), v...))
	})
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.Tank {
	return predicate.Tank(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldID), id))
	})
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.Tank {
	return predicate.Tank(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldID), id))
	})
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.Tank {
	return predicate.Tank(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldID), id))
	})
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.Tank {
	return predicate.Tank(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldID), id))
	})
}

// Name applies equality check predicate on the "name" field. It's identical to NameEQ.
func Name(v string) predicate.Tank {
	return predicate.Tank(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldName), v))
	})
}

// Tier applies equality check predicate on the "tier" field. It's identical to TierEQ.
func Tier(v int) predicate.Tank {
	return predicate.Tank(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldTier), v))
	})
}

// IsPremium applies equality check predicate on the "isPremium" field. It's identical to IsPremiumEQ.
func IsPremium(v bool) predicate.Tank {
	return predicate.Tank(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldIsPremium), v))
	})
}

// TankClass applies equality check predicate on the "tankClass" field. It's identical to TankClassEQ.
func TankClass(v string) predicate.Tank {
	return predicate.Tank(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldTankClass), v))
	})
}

// Country applies equality check predicate on the "country" field. It's identical to CountryEQ.
func Country(v string) predicate.Tank {
	return predicate.Tank(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCountry), v))
	})
}

// NameEQ applies the EQ predicate on the "name" field.
func NameEQ(v string) predicate.Tank {
	return predicate.Tank(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldName), v))
	})
}

// NameNEQ applies the NEQ predicate on the "name" field.
func NameNEQ(v string) predicate.Tank {
	return predicate.Tank(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldName), v))
	})
}

// NameIn applies the In predicate on the "name" field.
func NameIn(vs ...string) predicate.Tank {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Tank(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldName), v...))
	})
}

// NameNotIn applies the NotIn predicate on the "name" field.
func NameNotIn(vs ...string) predicate.Tank {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Tank(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldName), v...))
	})
}

// NameGT applies the GT predicate on the "name" field.
func NameGT(v string) predicate.Tank {
	return predicate.Tank(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldName), v))
	})
}

// NameGTE applies the GTE predicate on the "name" field.
func NameGTE(v string) predicate.Tank {
	return predicate.Tank(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldName), v))
	})
}

// NameLT applies the LT predicate on the "name" field.
func NameLT(v string) predicate.Tank {
	return predicate.Tank(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldName), v))
	})
}

// NameLTE applies the LTE predicate on the "name" field.
func NameLTE(v string) predicate.Tank {
	return predicate.Tank(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldName), v))
	})
}

// NameContains applies the Contains predicate on the "name" field.
func NameContains(v string) predicate.Tank {
	return predicate.Tank(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldName), v))
	})
}

// NameHasPrefix applies the HasPrefix predicate on the "name" field.
func NameHasPrefix(v string) predicate.Tank {
	return predicate.Tank(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldName), v))
	})
}

// NameHasSuffix applies the HasSuffix predicate on the "name" field.
func NameHasSuffix(v string) predicate.Tank {
	return predicate.Tank(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldName), v))
	})
}

// NameEqualFold applies the EqualFold predicate on the "name" field.
func NameEqualFold(v string) predicate.Tank {
	return predicate.Tank(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldName), v))
	})
}

// NameContainsFold applies the ContainsFold predicate on the "name" field.
func NameContainsFold(v string) predicate.Tank {
	return predicate.Tank(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldName), v))
	})
}

// TierEQ applies the EQ predicate on the "tier" field.
func TierEQ(v int) predicate.Tank {
	return predicate.Tank(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldTier), v))
	})
}

// TierNEQ applies the NEQ predicate on the "tier" field.
func TierNEQ(v int) predicate.Tank {
	return predicate.Tank(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldTier), v))
	})
}

// TierIn applies the In predicate on the "tier" field.
func TierIn(vs ...int) predicate.Tank {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Tank(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldTier), v...))
	})
}

// TierNotIn applies the NotIn predicate on the "tier" field.
func TierNotIn(vs ...int) predicate.Tank {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Tank(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldTier), v...))
	})
}

// TierGT applies the GT predicate on the "tier" field.
func TierGT(v int) predicate.Tank {
	return predicate.Tank(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldTier), v))
	})
}

// TierGTE applies the GTE predicate on the "tier" field.
func TierGTE(v int) predicate.Tank {
	return predicate.Tank(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldTier), v))
	})
}

// TierLT applies the LT predicate on the "tier" field.
func TierLT(v int) predicate.Tank {
	return predicate.Tank(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldTier), v))
	})
}

// TierLTE applies the LTE predicate on the "tier" field.
func TierLTE(v int) predicate.Tank {
	return predicate.Tank(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldTier), v))
	})
}

// IsPremiumEQ applies the EQ predicate on the "isPremium" field.
func IsPremiumEQ(v bool) predicate.Tank {
	return predicate.Tank(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldIsPremium), v))
	})
}

// IsPremiumNEQ applies the NEQ predicate on the "isPremium" field.
func IsPremiumNEQ(v bool) predicate.Tank {
	return predicate.Tank(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldIsPremium), v))
	})
}

// TankClassEQ applies the EQ predicate on the "tankClass" field.
func TankClassEQ(v string) predicate.Tank {
	return predicate.Tank(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldTankClass), v))
	})
}

// TankClassNEQ applies the NEQ predicate on the "tankClass" field.
func TankClassNEQ(v string) predicate.Tank {
	return predicate.Tank(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldTankClass), v))
	})
}

// TankClassIn applies the In predicate on the "tankClass" field.
func TankClassIn(vs ...string) predicate.Tank {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Tank(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldTankClass), v...))
	})
}

// TankClassNotIn applies the NotIn predicate on the "tankClass" field.
func TankClassNotIn(vs ...string) predicate.Tank {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Tank(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldTankClass), v...))
	})
}

// TankClassGT applies the GT predicate on the "tankClass" field.
func TankClassGT(v string) predicate.Tank {
	return predicate.Tank(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldTankClass), v))
	})
}

// TankClassGTE applies the GTE predicate on the "tankClass" field.
func TankClassGTE(v string) predicate.Tank {
	return predicate.Tank(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldTankClass), v))
	})
}

// TankClassLT applies the LT predicate on the "tankClass" field.
func TankClassLT(v string) predicate.Tank {
	return predicate.Tank(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldTankClass), v))
	})
}

// TankClassLTE applies the LTE predicate on the "tankClass" field.
func TankClassLTE(v string) predicate.Tank {
	return predicate.Tank(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldTankClass), v))
	})
}

// TankClassContains applies the Contains predicate on the "tankClass" field.
func TankClassContains(v string) predicate.Tank {
	return predicate.Tank(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldTankClass), v))
	})
}

// TankClassHasPrefix applies the HasPrefix predicate on the "tankClass" field.
func TankClassHasPrefix(v string) predicate.Tank {
	return predicate.Tank(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldTankClass), v))
	})
}

// TankClassHasSuffix applies the HasSuffix predicate on the "tankClass" field.
func TankClassHasSuffix(v string) predicate.Tank {
	return predicate.Tank(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldTankClass), v))
	})
}

// TankClassEqualFold applies the EqualFold predicate on the "tankClass" field.
func TankClassEqualFold(v string) predicate.Tank {
	return predicate.Tank(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldTankClass), v))
	})
}

// TankClassContainsFold applies the ContainsFold predicate on the "tankClass" field.
func TankClassContainsFold(v string) predicate.Tank {
	return predicate.Tank(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldTankClass), v))
	})
}

// CountryEQ applies the EQ predicate on the "country" field.
func CountryEQ(v string) predicate.Tank {
	return predicate.Tank(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCountry), v))
	})
}

// CountryNEQ applies the NEQ predicate on the "country" field.
func CountryNEQ(v string) predicate.Tank {
	return predicate.Tank(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldCountry), v))
	})
}

// CountryIn applies the In predicate on the "country" field.
func CountryIn(vs ...string) predicate.Tank {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Tank(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldCountry), v...))
	})
}

// CountryNotIn applies the NotIn predicate on the "country" field.
func CountryNotIn(vs ...string) predicate.Tank {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Tank(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldCountry), v...))
	})
}

// CountryGT applies the GT predicate on the "country" field.
func CountryGT(v string) predicate.Tank {
	return predicate.Tank(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldCountry), v))
	})
}

// CountryGTE applies the GTE predicate on the "country" field.
func CountryGTE(v string) predicate.Tank {
	return predicate.Tank(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldCountry), v))
	})
}

// CountryLT applies the LT predicate on the "country" field.
func CountryLT(v string) predicate.Tank {
	return predicate.Tank(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldCountry), v))
	})
}

// CountryLTE applies the LTE predicate on the "country" field.
func CountryLTE(v string) predicate.Tank {
	return predicate.Tank(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldCountry), v))
	})
}

// CountryContains applies the Contains predicate on the "country" field.
func CountryContains(v string) predicate.Tank {
	return predicate.Tank(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldCountry), v))
	})
}

// CountryHasPrefix applies the HasPrefix predicate on the "country" field.
func CountryHasPrefix(v string) predicate.Tank {
	return predicate.Tank(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldCountry), v))
	})
}

// CountryHasSuffix applies the HasSuffix predicate on the "country" field.
func CountryHasSuffix(v string) predicate.Tank {
	return predicate.Tank(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldCountry), v))
	})
}

// CountryEqualFold applies the EqualFold predicate on the "country" field.
func CountryEqualFold(v string) predicate.Tank {
	return predicate.Tank(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldCountry), v))
	})
}

// CountryContainsFold applies the ContainsFold predicate on the "country" field.
func CountryContainsFold(v string) predicate.Tank {
	return predicate.Tank(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldCountry), v))
	})
}

// HasFromTankId applies the HasEdge predicate on the "fromTankId" edge.
func HasFromTankId() predicate.Tank {
	return predicate.Tank(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(FromTankIdTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2M, true, FromTankIdTable, FromTankIdPrimaryKey...),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasFromTankIdWith applies the HasEdge predicate on the "fromTankId" edge with a given conditions (other predicates).
func HasFromTankIdWith(preds ...predicate.Tank) predicate.Tank {
	return predicate.Tank(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2M, true, FromTankIdTable, FromTankIdPrimaryKey...),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasNextTanks applies the HasEdge predicate on the "nextTanks" edge.
func HasNextTanks() predicate.Tank {
	return predicate.Tank(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(NextTanksTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2M, false, NextTanksTable, NextTanksPrimaryKey...),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasNextTanksWith applies the HasEdge predicate on the "nextTanks" edge with a given conditions (other predicates).
func HasNextTanksWith(preds ...predicate.Tank) predicate.Tank {
	return predicate.Tank(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2M, false, NextTanksTable, NextTanksPrimaryKey...),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasNextTankId applies the HasEdge predicate on the "nextTankId" edge.
func HasNextTankId() predicate.Tank {
	return predicate.Tank(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(NextTankIdTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2M, true, NextTankIdTable, NextTankIdPrimaryKey...),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasNextTankIdWith applies the HasEdge predicate on the "nextTankId" edge with a given conditions (other predicates).
func HasNextTankIdWith(preds ...predicate.Tank) predicate.Tank {
	return predicate.Tank(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2M, true, NextTankIdTable, NextTankIdPrimaryKey...),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasPreviousTanks applies the HasEdge predicate on the "previousTanks" edge.
func HasPreviousTanks() predicate.Tank {
	return predicate.Tank(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(PreviousTanksTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2M, false, PreviousTanksTable, PreviousTanksPrimaryKey...),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasPreviousTanksWith applies the HasEdge predicate on the "previousTanks" edge with a given conditions (other predicates).
func HasPreviousTanksWith(preds ...predicate.Tank) predicate.Tank {
	return predicate.Tank(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2M, false, PreviousTanksTable, PreviousTanksPrimaryKey...),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasModules applies the HasEdge predicate on the "modules" edge.
func HasModules() predicate.Tank {
	return predicate.Tank(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(ModulesTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2M, false, ModulesTable, ModulesPrimaryKey...),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasModulesWith applies the HasEdge predicate on the "modules" edge with a given conditions (other predicates).
func HasModulesWith(preds ...predicate.Module) predicate.Tank {
	return predicate.Tank(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(ModulesInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2M, false, ModulesTable, ModulesPrimaryKey...),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups list of predicates with the AND operator between them.
func And(predicates ...predicate.Tank) predicate.Tank {
	return predicate.Tank(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for _, p := range predicates {
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Or groups list of predicates with the OR operator between them.
func Or(predicates ...predicate.Tank) predicate.Tank {
	return predicate.Tank(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for i, p := range predicates {
			if i > 0 {
				s1.Or()
			}
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Tank) predicate.Tank {
	return predicate.Tank(func(s *sql.Selector) {
		p(s.Not())
	})
}
