// Code generated by entc, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"github.com/facebook/ent/dialect/sql"
	"github.com/yigitsadic/wotblitz_example/ent/module"
)

// Module is the model entity for the Module schema.
type Module struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// Name holds the value of the "name" field.
	Name string `json:"name,omitempty"`
	// ModuleType holds the value of the "moduleType" field.
	ModuleType string `json:"moduleType,omitempty"`
	// CreatedAt holds the value of the "createdAt" field.
	CreatedAt time.Time `json:"createdAt,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the ModuleQuery when eager-loading is set.
	Edges ModuleEdges `json:"edges"`
}

// ModuleEdges holds the relations/edges for other nodes in the graph.
type ModuleEdges struct {
	// Tanks holds the value of the tanks edge.
	Tanks []*Tank
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
}

// TanksOrErr returns the Tanks value or an error if the edge
// was not loaded in eager-loading.
func (e ModuleEdges) TanksOrErr() ([]*Tank, error) {
	if e.loadedTypes[0] {
		return e.Tanks, nil
	}
	return nil, &NotLoadedError{edge: "tanks"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Module) scanValues() []interface{} {
	return []interface{}{
		&sql.NullInt64{},  // id
		&sql.NullString{}, // name
		&sql.NullString{}, // moduleType
		&sql.NullTime{},   // createdAt
	}
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Module fields.
func (m *Module) assignValues(values ...interface{}) error {
	if m, n := len(values), len(module.Columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	value, ok := values[0].(*sql.NullInt64)
	if !ok {
		return fmt.Errorf("unexpected type %T for field id", value)
	}
	m.ID = int(value.Int64)
	values = values[1:]
	if value, ok := values[0].(*sql.NullString); !ok {
		return fmt.Errorf("unexpected type %T for field name", values[0])
	} else if value.Valid {
		m.Name = value.String
	}
	if value, ok := values[1].(*sql.NullString); !ok {
		return fmt.Errorf("unexpected type %T for field moduleType", values[1])
	} else if value.Valid {
		m.ModuleType = value.String
	}
	if value, ok := values[2].(*sql.NullTime); !ok {
		return fmt.Errorf("unexpected type %T for field createdAt", values[2])
	} else if value.Valid {
		m.CreatedAt = value.Time
	}
	return nil
}

// QueryTanks queries the tanks edge of the Module.
func (m *Module) QueryTanks() *TankQuery {
	return (&ModuleClient{config: m.config}).QueryTanks(m)
}

// Update returns a builder for updating this Module.
// Note that, you need to call Module.Unwrap() before calling this method, if this Module
// was returned from a transaction, and the transaction was committed or rolled back.
func (m *Module) Update() *ModuleUpdateOne {
	return (&ModuleClient{config: m.config}).UpdateOne(m)
}

// Unwrap unwraps the entity that was returned from a transaction after it was closed,
// so that all next queries will be executed through the driver which created the transaction.
func (m *Module) Unwrap() *Module {
	tx, ok := m.config.driver.(*txDriver)
	if !ok {
		panic("ent: Module is not a transactional entity")
	}
	m.config.driver = tx.drv
	return m
}

// String implements the fmt.Stringer.
func (m *Module) String() string {
	var builder strings.Builder
	builder.WriteString("Module(")
	builder.WriteString(fmt.Sprintf("id=%v", m.ID))
	builder.WriteString(", name=")
	builder.WriteString(m.Name)
	builder.WriteString(", moduleType=")
	builder.WriteString(m.ModuleType)
	builder.WriteString(", createdAt=")
	builder.WriteString(m.CreatedAt.Format(time.ANSIC))
	builder.WriteByte(')')
	return builder.String()
}

// Modules is a parsable slice of Module.
type Modules []*Module

func (m Modules) config(cfg config) {
	for _i := range m {
		m[_i].config = cfg
	}
}
