// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"

	"github.com/facebook/ent/dialect/sql"
	"github.com/facebook/ent/dialect/sql/sqlgraph"
	"github.com/facebook/ent/schema/field"
	"github.com/yigitsadic/wotblitz_example/ent/module"
	"github.com/yigitsadic/wotblitz_example/ent/predicate"
	"github.com/yigitsadic/wotblitz_example/ent/tank"
)

// TankUpdate is the builder for updating Tank entities.
type TankUpdate struct {
	config
	hooks    []Hook
	mutation *TankMutation
}

// Where adds a new predicate for the builder.
func (tu *TankUpdate) Where(ps ...predicate.Tank) *TankUpdate {
	tu.mutation.predicates = append(tu.mutation.predicates, ps...)
	return tu
}

// SetName sets the name field.
func (tu *TankUpdate) SetName(s string) *TankUpdate {
	tu.mutation.SetName(s)
	return tu
}

// SetTier sets the tier field.
func (tu *TankUpdate) SetTier(i int) *TankUpdate {
	tu.mutation.ResetTier()
	tu.mutation.SetTier(i)
	return tu
}

// AddTier adds i to tier.
func (tu *TankUpdate) AddTier(i int) *TankUpdate {
	tu.mutation.AddTier(i)
	return tu
}

// SetIsPremium sets the isPremium field.
func (tu *TankUpdate) SetIsPremium(b bool) *TankUpdate {
	tu.mutation.SetIsPremium(b)
	return tu
}

// SetNillableIsPremium sets the isPremium field if the given value is not nil.
func (tu *TankUpdate) SetNillableIsPremium(b *bool) *TankUpdate {
	if b != nil {
		tu.SetIsPremium(*b)
	}
	return tu
}

// SetTankClass sets the tankClass field.
func (tu *TankUpdate) SetTankClass(s string) *TankUpdate {
	tu.mutation.SetTankClass(s)
	return tu
}

// SetCountry sets the country field.
func (tu *TankUpdate) SetCountry(s string) *TankUpdate {
	tu.mutation.SetCountry(s)
	return tu
}

// AddFromTankIdIDs adds the fromTankId edge to Tank by ids.
func (tu *TankUpdate) AddFromTankIdIDs(ids ...int) *TankUpdate {
	tu.mutation.AddFromTankIdIDs(ids...)
	return tu
}

// AddFromTankId adds the fromTankId edges to Tank.
func (tu *TankUpdate) AddFromTankId(t ...*Tank) *TankUpdate {
	ids := make([]int, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return tu.AddFromTankIdIDs(ids...)
}

// AddNextTankIDs adds the nextTanks edge to Tank by ids.
func (tu *TankUpdate) AddNextTankIDs(ids ...int) *TankUpdate {
	tu.mutation.AddNextTankIDs(ids...)
	return tu
}

// AddNextTanks adds the nextTanks edges to Tank.
func (tu *TankUpdate) AddNextTanks(t ...*Tank) *TankUpdate {
	ids := make([]int, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return tu.AddNextTankIDs(ids...)
}

// AddNextTankIdIDs adds the nextTankId edge to Tank by ids.
func (tu *TankUpdate) AddNextTankIdIDs(ids ...int) *TankUpdate {
	tu.mutation.AddNextTankIdIDs(ids...)
	return tu
}

// AddNextTankId adds the nextTankId edges to Tank.
func (tu *TankUpdate) AddNextTankId(t ...*Tank) *TankUpdate {
	ids := make([]int, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return tu.AddNextTankIdIDs(ids...)
}

// AddPreviousTankIDs adds the previousTanks edge to Tank by ids.
func (tu *TankUpdate) AddPreviousTankIDs(ids ...int) *TankUpdate {
	tu.mutation.AddPreviousTankIDs(ids...)
	return tu
}

// AddPreviousTanks adds the previousTanks edges to Tank.
func (tu *TankUpdate) AddPreviousTanks(t ...*Tank) *TankUpdate {
	ids := make([]int, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return tu.AddPreviousTankIDs(ids...)
}

// AddModuleIDs adds the modules edge to Module by ids.
func (tu *TankUpdate) AddModuleIDs(ids ...int) *TankUpdate {
	tu.mutation.AddModuleIDs(ids...)
	return tu
}

// AddModules adds the modules edges to Module.
func (tu *TankUpdate) AddModules(m ...*Module) *TankUpdate {
	ids := make([]int, len(m))
	for i := range m {
		ids[i] = m[i].ID
	}
	return tu.AddModuleIDs(ids...)
}

// Mutation returns the TankMutation object of the builder.
func (tu *TankUpdate) Mutation() *TankMutation {
	return tu.mutation
}

// ClearFromTankId clears all "fromTankId" edges to type Tank.
func (tu *TankUpdate) ClearFromTankId() *TankUpdate {
	tu.mutation.ClearFromTankId()
	return tu
}

// RemoveFromTankIdIDs removes the fromTankId edge to Tank by ids.
func (tu *TankUpdate) RemoveFromTankIdIDs(ids ...int) *TankUpdate {
	tu.mutation.RemoveFromTankIdIDs(ids...)
	return tu
}

// RemoveFromTankId removes fromTankId edges to Tank.
func (tu *TankUpdate) RemoveFromTankId(t ...*Tank) *TankUpdate {
	ids := make([]int, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return tu.RemoveFromTankIdIDs(ids...)
}

// ClearNextTanks clears all "nextTanks" edges to type Tank.
func (tu *TankUpdate) ClearNextTanks() *TankUpdate {
	tu.mutation.ClearNextTanks()
	return tu
}

// RemoveNextTankIDs removes the nextTanks edge to Tank by ids.
func (tu *TankUpdate) RemoveNextTankIDs(ids ...int) *TankUpdate {
	tu.mutation.RemoveNextTankIDs(ids...)
	return tu
}

// RemoveNextTanks removes nextTanks edges to Tank.
func (tu *TankUpdate) RemoveNextTanks(t ...*Tank) *TankUpdate {
	ids := make([]int, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return tu.RemoveNextTankIDs(ids...)
}

// ClearNextTankId clears all "nextTankId" edges to type Tank.
func (tu *TankUpdate) ClearNextTankId() *TankUpdate {
	tu.mutation.ClearNextTankId()
	return tu
}

// RemoveNextTankIdIDs removes the nextTankId edge to Tank by ids.
func (tu *TankUpdate) RemoveNextTankIdIDs(ids ...int) *TankUpdate {
	tu.mutation.RemoveNextTankIdIDs(ids...)
	return tu
}

// RemoveNextTankId removes nextTankId edges to Tank.
func (tu *TankUpdate) RemoveNextTankId(t ...*Tank) *TankUpdate {
	ids := make([]int, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return tu.RemoveNextTankIdIDs(ids...)
}

// ClearPreviousTanks clears all "previousTanks" edges to type Tank.
func (tu *TankUpdate) ClearPreviousTanks() *TankUpdate {
	tu.mutation.ClearPreviousTanks()
	return tu
}

// RemovePreviousTankIDs removes the previousTanks edge to Tank by ids.
func (tu *TankUpdate) RemovePreviousTankIDs(ids ...int) *TankUpdate {
	tu.mutation.RemovePreviousTankIDs(ids...)
	return tu
}

// RemovePreviousTanks removes previousTanks edges to Tank.
func (tu *TankUpdate) RemovePreviousTanks(t ...*Tank) *TankUpdate {
	ids := make([]int, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return tu.RemovePreviousTankIDs(ids...)
}

// ClearModules clears all "modules" edges to type Module.
func (tu *TankUpdate) ClearModules() *TankUpdate {
	tu.mutation.ClearModules()
	return tu
}

// RemoveModuleIDs removes the modules edge to Module by ids.
func (tu *TankUpdate) RemoveModuleIDs(ids ...int) *TankUpdate {
	tu.mutation.RemoveModuleIDs(ids...)
	return tu
}

// RemoveModules removes modules edges to Module.
func (tu *TankUpdate) RemoveModules(m ...*Module) *TankUpdate {
	ids := make([]int, len(m))
	for i := range m {
		ids[i] = m[i].ID
	}
	return tu.RemoveModuleIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (tu *TankUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	if len(tu.hooks) == 0 {
		if err = tu.check(); err != nil {
			return 0, err
		}
		affected, err = tu.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*TankMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = tu.check(); err != nil {
				return 0, err
			}
			tu.mutation = mutation
			affected, err = tu.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(tu.hooks) - 1; i >= 0; i-- {
			mut = tu.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, tu.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (tu *TankUpdate) SaveX(ctx context.Context) int {
	affected, err := tu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (tu *TankUpdate) Exec(ctx context.Context) error {
	_, err := tu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (tu *TankUpdate) ExecX(ctx context.Context) {
	if err := tu.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (tu *TankUpdate) check() error {
	if v, ok := tu.mutation.Name(); ok {
		if err := tank.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf("ent: validator failed for field \"name\": %w", err)}
		}
	}
	if v, ok := tu.mutation.TankClass(); ok {
		if err := tank.TankClassValidator(v); err != nil {
			return &ValidationError{Name: "tankClass", err: fmt.Errorf("ent: validator failed for field \"tankClass\": %w", err)}
		}
	}
	if v, ok := tu.mutation.Country(); ok {
		if err := tank.CountryValidator(v); err != nil {
			return &ValidationError{Name: "country", err: fmt.Errorf("ent: validator failed for field \"country\": %w", err)}
		}
	}
	return nil
}

func (tu *TankUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   tank.Table,
			Columns: tank.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: tank.FieldID,
			},
		},
	}
	if ps := tu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := tu.mutation.Name(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: tank.FieldName,
		})
	}
	if value, ok := tu.mutation.Tier(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: tank.FieldTier,
		})
	}
	if value, ok := tu.mutation.AddedTier(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: tank.FieldTier,
		})
	}
	if value, ok := tu.mutation.IsPremium(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeBool,
			Value:  value,
			Column: tank.FieldIsPremium,
		})
	}
	if value, ok := tu.mutation.TankClass(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: tank.FieldTankClass,
		})
	}
	if value, ok := tu.mutation.Country(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: tank.FieldCountry,
		})
	}
	if tu.mutation.FromTankIdCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   tank.FromTankIdTable,
			Columns: tank.FromTankIdPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: tank.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tu.mutation.RemovedFromTankIdIDs(); len(nodes) > 0 && !tu.mutation.FromTankIdCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   tank.FromTankIdTable,
			Columns: tank.FromTankIdPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: tank.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tu.mutation.FromTankIdIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   tank.FromTankIdTable,
			Columns: tank.FromTankIdPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: tank.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if tu.mutation.NextTanksCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   tank.NextTanksTable,
			Columns: tank.NextTanksPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: tank.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tu.mutation.RemovedNextTanksIDs(); len(nodes) > 0 && !tu.mutation.NextTanksCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   tank.NextTanksTable,
			Columns: tank.NextTanksPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: tank.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tu.mutation.NextTanksIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   tank.NextTanksTable,
			Columns: tank.NextTanksPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: tank.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if tu.mutation.NextTankIdCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   tank.NextTankIdTable,
			Columns: tank.NextTankIdPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: tank.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tu.mutation.RemovedNextTankIdIDs(); len(nodes) > 0 && !tu.mutation.NextTankIdCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   tank.NextTankIdTable,
			Columns: tank.NextTankIdPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: tank.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tu.mutation.NextTankIdIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   tank.NextTankIdTable,
			Columns: tank.NextTankIdPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: tank.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if tu.mutation.PreviousTanksCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   tank.PreviousTanksTable,
			Columns: tank.PreviousTanksPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: tank.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tu.mutation.RemovedPreviousTanksIDs(); len(nodes) > 0 && !tu.mutation.PreviousTanksCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   tank.PreviousTanksTable,
			Columns: tank.PreviousTanksPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: tank.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tu.mutation.PreviousTanksIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   tank.PreviousTanksTable,
			Columns: tank.PreviousTanksPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: tank.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if tu.mutation.ModulesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   tank.ModulesTable,
			Columns: tank.ModulesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: module.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tu.mutation.RemovedModulesIDs(); len(nodes) > 0 && !tu.mutation.ModulesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   tank.ModulesTable,
			Columns: tank.ModulesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: module.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tu.mutation.ModulesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   tank.ModulesTable,
			Columns: tank.ModulesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: module.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, tu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{tank.Label}
		} else if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return 0, err
	}
	return n, nil
}

// TankUpdateOne is the builder for updating a single Tank entity.
type TankUpdateOne struct {
	config
	hooks    []Hook
	mutation *TankMutation
}

// SetName sets the name field.
func (tuo *TankUpdateOne) SetName(s string) *TankUpdateOne {
	tuo.mutation.SetName(s)
	return tuo
}

// SetTier sets the tier field.
func (tuo *TankUpdateOne) SetTier(i int) *TankUpdateOne {
	tuo.mutation.ResetTier()
	tuo.mutation.SetTier(i)
	return tuo
}

// AddTier adds i to tier.
func (tuo *TankUpdateOne) AddTier(i int) *TankUpdateOne {
	tuo.mutation.AddTier(i)
	return tuo
}

// SetIsPremium sets the isPremium field.
func (tuo *TankUpdateOne) SetIsPremium(b bool) *TankUpdateOne {
	tuo.mutation.SetIsPremium(b)
	return tuo
}

// SetNillableIsPremium sets the isPremium field if the given value is not nil.
func (tuo *TankUpdateOne) SetNillableIsPremium(b *bool) *TankUpdateOne {
	if b != nil {
		tuo.SetIsPremium(*b)
	}
	return tuo
}

// SetTankClass sets the tankClass field.
func (tuo *TankUpdateOne) SetTankClass(s string) *TankUpdateOne {
	tuo.mutation.SetTankClass(s)
	return tuo
}

// SetCountry sets the country field.
func (tuo *TankUpdateOne) SetCountry(s string) *TankUpdateOne {
	tuo.mutation.SetCountry(s)
	return tuo
}

// AddFromTankIdIDs adds the fromTankId edge to Tank by ids.
func (tuo *TankUpdateOne) AddFromTankIdIDs(ids ...int) *TankUpdateOne {
	tuo.mutation.AddFromTankIdIDs(ids...)
	return tuo
}

// AddFromTankId adds the fromTankId edges to Tank.
func (tuo *TankUpdateOne) AddFromTankId(t ...*Tank) *TankUpdateOne {
	ids := make([]int, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return tuo.AddFromTankIdIDs(ids...)
}

// AddNextTankIDs adds the nextTanks edge to Tank by ids.
func (tuo *TankUpdateOne) AddNextTankIDs(ids ...int) *TankUpdateOne {
	tuo.mutation.AddNextTankIDs(ids...)
	return tuo
}

// AddNextTanks adds the nextTanks edges to Tank.
func (tuo *TankUpdateOne) AddNextTanks(t ...*Tank) *TankUpdateOne {
	ids := make([]int, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return tuo.AddNextTankIDs(ids...)
}

// AddNextTankIdIDs adds the nextTankId edge to Tank by ids.
func (tuo *TankUpdateOne) AddNextTankIdIDs(ids ...int) *TankUpdateOne {
	tuo.mutation.AddNextTankIdIDs(ids...)
	return tuo
}

// AddNextTankId adds the nextTankId edges to Tank.
func (tuo *TankUpdateOne) AddNextTankId(t ...*Tank) *TankUpdateOne {
	ids := make([]int, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return tuo.AddNextTankIdIDs(ids...)
}

// AddPreviousTankIDs adds the previousTanks edge to Tank by ids.
func (tuo *TankUpdateOne) AddPreviousTankIDs(ids ...int) *TankUpdateOne {
	tuo.mutation.AddPreviousTankIDs(ids...)
	return tuo
}

// AddPreviousTanks adds the previousTanks edges to Tank.
func (tuo *TankUpdateOne) AddPreviousTanks(t ...*Tank) *TankUpdateOne {
	ids := make([]int, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return tuo.AddPreviousTankIDs(ids...)
}

// AddModuleIDs adds the modules edge to Module by ids.
func (tuo *TankUpdateOne) AddModuleIDs(ids ...int) *TankUpdateOne {
	tuo.mutation.AddModuleIDs(ids...)
	return tuo
}

// AddModules adds the modules edges to Module.
func (tuo *TankUpdateOne) AddModules(m ...*Module) *TankUpdateOne {
	ids := make([]int, len(m))
	for i := range m {
		ids[i] = m[i].ID
	}
	return tuo.AddModuleIDs(ids...)
}

// Mutation returns the TankMutation object of the builder.
func (tuo *TankUpdateOne) Mutation() *TankMutation {
	return tuo.mutation
}

// ClearFromTankId clears all "fromTankId" edges to type Tank.
func (tuo *TankUpdateOne) ClearFromTankId() *TankUpdateOne {
	tuo.mutation.ClearFromTankId()
	return tuo
}

// RemoveFromTankIdIDs removes the fromTankId edge to Tank by ids.
func (tuo *TankUpdateOne) RemoveFromTankIdIDs(ids ...int) *TankUpdateOne {
	tuo.mutation.RemoveFromTankIdIDs(ids...)
	return tuo
}

// RemoveFromTankId removes fromTankId edges to Tank.
func (tuo *TankUpdateOne) RemoveFromTankId(t ...*Tank) *TankUpdateOne {
	ids := make([]int, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return tuo.RemoveFromTankIdIDs(ids...)
}

// ClearNextTanks clears all "nextTanks" edges to type Tank.
func (tuo *TankUpdateOne) ClearNextTanks() *TankUpdateOne {
	tuo.mutation.ClearNextTanks()
	return tuo
}

// RemoveNextTankIDs removes the nextTanks edge to Tank by ids.
func (tuo *TankUpdateOne) RemoveNextTankIDs(ids ...int) *TankUpdateOne {
	tuo.mutation.RemoveNextTankIDs(ids...)
	return tuo
}

// RemoveNextTanks removes nextTanks edges to Tank.
func (tuo *TankUpdateOne) RemoveNextTanks(t ...*Tank) *TankUpdateOne {
	ids := make([]int, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return tuo.RemoveNextTankIDs(ids...)
}

// ClearNextTankId clears all "nextTankId" edges to type Tank.
func (tuo *TankUpdateOne) ClearNextTankId() *TankUpdateOne {
	tuo.mutation.ClearNextTankId()
	return tuo
}

// RemoveNextTankIdIDs removes the nextTankId edge to Tank by ids.
func (tuo *TankUpdateOne) RemoveNextTankIdIDs(ids ...int) *TankUpdateOne {
	tuo.mutation.RemoveNextTankIdIDs(ids...)
	return tuo
}

// RemoveNextTankId removes nextTankId edges to Tank.
func (tuo *TankUpdateOne) RemoveNextTankId(t ...*Tank) *TankUpdateOne {
	ids := make([]int, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return tuo.RemoveNextTankIdIDs(ids...)
}

// ClearPreviousTanks clears all "previousTanks" edges to type Tank.
func (tuo *TankUpdateOne) ClearPreviousTanks() *TankUpdateOne {
	tuo.mutation.ClearPreviousTanks()
	return tuo
}

// RemovePreviousTankIDs removes the previousTanks edge to Tank by ids.
func (tuo *TankUpdateOne) RemovePreviousTankIDs(ids ...int) *TankUpdateOne {
	tuo.mutation.RemovePreviousTankIDs(ids...)
	return tuo
}

// RemovePreviousTanks removes previousTanks edges to Tank.
func (tuo *TankUpdateOne) RemovePreviousTanks(t ...*Tank) *TankUpdateOne {
	ids := make([]int, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return tuo.RemovePreviousTankIDs(ids...)
}

// ClearModules clears all "modules" edges to type Module.
func (tuo *TankUpdateOne) ClearModules() *TankUpdateOne {
	tuo.mutation.ClearModules()
	return tuo
}

// RemoveModuleIDs removes the modules edge to Module by ids.
func (tuo *TankUpdateOne) RemoveModuleIDs(ids ...int) *TankUpdateOne {
	tuo.mutation.RemoveModuleIDs(ids...)
	return tuo
}

// RemoveModules removes modules edges to Module.
func (tuo *TankUpdateOne) RemoveModules(m ...*Module) *TankUpdateOne {
	ids := make([]int, len(m))
	for i := range m {
		ids[i] = m[i].ID
	}
	return tuo.RemoveModuleIDs(ids...)
}

// Save executes the query and returns the updated entity.
func (tuo *TankUpdateOne) Save(ctx context.Context) (*Tank, error) {
	var (
		err  error
		node *Tank
	)
	if len(tuo.hooks) == 0 {
		if err = tuo.check(); err != nil {
			return nil, err
		}
		node, err = tuo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*TankMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = tuo.check(); err != nil {
				return nil, err
			}
			tuo.mutation = mutation
			node, err = tuo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(tuo.hooks) - 1; i >= 0; i-- {
			mut = tuo.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, tuo.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (tuo *TankUpdateOne) SaveX(ctx context.Context) *Tank {
	node, err := tuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (tuo *TankUpdateOne) Exec(ctx context.Context) error {
	_, err := tuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (tuo *TankUpdateOne) ExecX(ctx context.Context) {
	if err := tuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (tuo *TankUpdateOne) check() error {
	if v, ok := tuo.mutation.Name(); ok {
		if err := tank.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf("ent: validator failed for field \"name\": %w", err)}
		}
	}
	if v, ok := tuo.mutation.TankClass(); ok {
		if err := tank.TankClassValidator(v); err != nil {
			return &ValidationError{Name: "tankClass", err: fmt.Errorf("ent: validator failed for field \"tankClass\": %w", err)}
		}
	}
	if v, ok := tuo.mutation.Country(); ok {
		if err := tank.CountryValidator(v); err != nil {
			return &ValidationError{Name: "country", err: fmt.Errorf("ent: validator failed for field \"country\": %w", err)}
		}
	}
	return nil
}

func (tuo *TankUpdateOne) sqlSave(ctx context.Context) (_node *Tank, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   tank.Table,
			Columns: tank.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: tank.FieldID,
			},
		},
	}
	id, ok := tuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "ID", err: fmt.Errorf("missing Tank.ID for update")}
	}
	_spec.Node.ID.Value = id
	if value, ok := tuo.mutation.Name(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: tank.FieldName,
		})
	}
	if value, ok := tuo.mutation.Tier(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: tank.FieldTier,
		})
	}
	if value, ok := tuo.mutation.AddedTier(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: tank.FieldTier,
		})
	}
	if value, ok := tuo.mutation.IsPremium(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeBool,
			Value:  value,
			Column: tank.FieldIsPremium,
		})
	}
	if value, ok := tuo.mutation.TankClass(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: tank.FieldTankClass,
		})
	}
	if value, ok := tuo.mutation.Country(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: tank.FieldCountry,
		})
	}
	if tuo.mutation.FromTankIdCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   tank.FromTankIdTable,
			Columns: tank.FromTankIdPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: tank.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tuo.mutation.RemovedFromTankIdIDs(); len(nodes) > 0 && !tuo.mutation.FromTankIdCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   tank.FromTankIdTable,
			Columns: tank.FromTankIdPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: tank.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tuo.mutation.FromTankIdIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   tank.FromTankIdTable,
			Columns: tank.FromTankIdPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: tank.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if tuo.mutation.NextTanksCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   tank.NextTanksTable,
			Columns: tank.NextTanksPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: tank.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tuo.mutation.RemovedNextTanksIDs(); len(nodes) > 0 && !tuo.mutation.NextTanksCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   tank.NextTanksTable,
			Columns: tank.NextTanksPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: tank.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tuo.mutation.NextTanksIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   tank.NextTanksTable,
			Columns: tank.NextTanksPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: tank.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if tuo.mutation.NextTankIdCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   tank.NextTankIdTable,
			Columns: tank.NextTankIdPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: tank.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tuo.mutation.RemovedNextTankIdIDs(); len(nodes) > 0 && !tuo.mutation.NextTankIdCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   tank.NextTankIdTable,
			Columns: tank.NextTankIdPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: tank.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tuo.mutation.NextTankIdIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   tank.NextTankIdTable,
			Columns: tank.NextTankIdPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: tank.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if tuo.mutation.PreviousTanksCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   tank.PreviousTanksTable,
			Columns: tank.PreviousTanksPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: tank.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tuo.mutation.RemovedPreviousTanksIDs(); len(nodes) > 0 && !tuo.mutation.PreviousTanksCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   tank.PreviousTanksTable,
			Columns: tank.PreviousTanksPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: tank.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tuo.mutation.PreviousTanksIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   tank.PreviousTanksTable,
			Columns: tank.PreviousTanksPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: tank.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if tuo.mutation.ModulesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   tank.ModulesTable,
			Columns: tank.ModulesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: module.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tuo.mutation.RemovedModulesIDs(); len(nodes) > 0 && !tuo.mutation.ModulesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   tank.ModulesTable,
			Columns: tank.ModulesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: module.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tuo.mutation.ModulesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   tank.ModulesTable,
			Columns: tank.ModulesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: module.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Tank{config: tuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues()
	if err = sqlgraph.UpdateNode(ctx, tuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{tank.Label}
		} else if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return nil, err
	}
	return _node, nil
}
